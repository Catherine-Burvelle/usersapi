{
	"info": {
		"_postman_id": "8e798d69-1393-4045-9324-58b4584f5c1a",
		"name": "fr.burvelle.usersapi tests",
		"description": "The aim of this collection is to validate the usersapi project made to answer a technical offer test.\n\nIt is build around Create/Read/Update/Delete ability of the API.\n\nThis is functional testing :\n\n- Valid data\n- Invalid data\n- Not expected data (limit)\n    \n\nThere is no stress test, nor endurance test.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25109736"
	},
	"item": [
		{
			"name": "Create",
			"item": [
				{
					"name": "User create mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.firstName).to.eql(\"John\");",
									"    pm.expect(jsonData.lastName).to.eql(\"DOE\");",
									"    pm.expect(jsonData.birthdate).to.eql(\"1998-01-01\");",
									"    pm.expect(jsonData.country).to.eql(\"France\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"DOE\",\n    \"birthdate\": \"1998-01-01\",\n    \"country\": \"France\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9090/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User create options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.firstName).to.eql(\"John\");",
									"    pm.expect(jsonData.lastName).to.eql(\"DOE\");",
									"    pm.expect(jsonData.birthdate).to.eql(\"1998-01-01\");",
									"    pm.expect(jsonData.country).to.eql(\"France\");",
									"    pm.expect(jsonData.gender).to.eql(\"Male\");",
									"    pm.expect(jsonData.phone).to.eql(\"0102030405\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"DOE\",\n    \"birthdate\": \"1998-01-01\",\n    \"country\": \"France\",\n    \"gender\": \"Male\",\n    \"phone\": \"0102030405\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9090/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create bad age",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Age\");",
									"    pm.expect(pm.response.text()).to.include(\"is not allowed\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"DOE\",\n    \"birthdate\": \"2020-01-01\",\n    \"country\": \"France\",\n    \"gender\": \"Male\",\n    \"phone\": \"0102030405\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9090/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create bad country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Country\");",
									"    pm.expect(pm.response.text()).to.include(\"is not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"DOE\",\n    \"birthdate\": \"2000-01-01\",\n    \"country\": \"Italy\",\n    \"gender\": \"Male\",\n    \"phone\": \"0102030405\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9090/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create empty data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Lastname is missing or blank\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"\",\n    \"birthdate\": \"2000-01-01\",\n    \"country\": \"Italy\",\n    \"gender\": \"Male\",\n    \"phone\": \"0102030405\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9090/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create no body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9090/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create missing data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Firstname is missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lastName\": \"DOE\",\n    \"birthdate\": \"2000-01-01\",\n    \"country\": \"Italy\",\n    \"gender\": \"Male\",\n    \"phone\": \"0102030405\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9090/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User create more info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.firstName).to.eql(\"John\");",
									"    pm.expect(jsonData.lastName).to.eql(\"DOE\");",
									"    pm.expect(jsonData.birthdate).to.eql(\"1990-12-01\");",
									"    pm.expect(jsonData.country).to.eql(\"France\");",
									"    pm.expect(jsonData.gender).to.eql(\"Male\");",
									"    pm.expect(jsonData.phone).to.eql(\"0102030405\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"DOE\",\n    \"birthdate\": \"1990-12-01\",\n    \"country\": \"France\",\n    \"gender\": \"Male\",\n    \"phone\": \"0102030405\",\n    \"foo\": \"not empty\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9090/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Read",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].firstName).to.eql(\"Claude\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9090/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"    pm.expect(jsonData.firstName).to.eql(\"Claude\");",
									"    pm.expect(jsonData.lastName).to.eql(\"DOE\");",
									"    pm.expect(jsonData.birthdate).to.eql(\"2000-01-01\");",
									"    pm.expect(jsonData.gender).to.eql(\"female\");",
									"    pm.expect(jsonData.phone).to.eql(\"0102030406\");",
									"    pm.expect(jsonData.country).to.eql(\"FRANCE\");",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9090/user/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get invalid user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User \");",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9090/user/1000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get no user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9090/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update",
			"item": [
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"    pm.expect(jsonData.firstName).to.eql(\"Claude\");",
									"    pm.expect(jsonData.lastName).to.eql(\"DOE\");",
									"    pm.expect(jsonData.birthdate).to.eql(\"1998-02-02\");",
									"    pm.expect(jsonData.gender).to.eql(\"female\");",
									"    pm.expect(jsonData.phone).to.eql(\"0102030406\");",
									"    pm.expect(jsonData.country).to.eql(\"FRANCE\");",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"birthdate\": \"1998-02-02\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9090/user/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:9090/user/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete unexisting user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// To be run after \"Delete user\"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Returned data is accurate\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"No class fr.burvelle.usersapi.model.User entity with id 1 exists\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:9090/user/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"user",
								"1"
							]
						},
						"description": "This test is to be run after the \"Delete user\" one because it tries to delete the same user as that test."
					},
					"response": []
				}
			]
		}
	]
}